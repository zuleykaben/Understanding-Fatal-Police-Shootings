# -*- coding: utf-8 -*-
"""Data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LwR7qMTYVP2alFxCVDs1yF0-KSwLkeBc

Load data
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/Project 1- Team 2/Data&Github/fatal-police-shootings-data.csv")
df_agencies = pd.read_csv("/content/drive/MyDrive/Project 1- Team 2/Data&Github/fatal-police-shootings-agencies .csv")

df_demographics = pd.read_csv("/content/drive/MyDrive/Project 1- Team 2/Data&Github/us-cities-demographicscsv")

# Inspect the data
print(demographics_df.head())
print(demographics_df.columns.tolist())

df_agencies.head(10)



df.head(10)

# @title cleaning df
# shows which columns have missing values
missing_values = df.isnull().sum()
print("Missing Values:\n", missing_values)

# drop the rows where age, gender, race, or state are missing
df = df.dropna(subset=['age', 'gender','race','state'])

# replace missing county with unknown
df['county'].fillna("Unknown", inplace= True)

# replace missing armed_with with unknown
df['armed_with'].fillna('Unknown', inplace =  True)

"""Analyze police shootings over time."""

# show number of shootings per year
# date to datetime
df['date'] = pd.to_datetime(df['date'])

# extract year
df['year'] = df['date'].dt.year

# shootings per year
yearly_trends = df['year'].value_counts().sort_index()

"""Vizs"""

import matplotlib.pyplot as plt
plt.style.use("dark_background")
plt.figure(figsize=(10, 5))
yearly_trends.plot(
    kind="line",
    marker="o",
    color="white",
    linestyle="-",
    linewidth=2,
    markerfacecolor="white",
    markeredgewidth=1.5,
    markeredgecolor="white"
)
plt.xlabel("Year", color="white")
plt.ylabel("Number of Fatal Police Shootings", color="white")
plt.title("Fatal Police Shootings Over Time", color="white")
plt.xticks(color="white")
plt.yticks(color="white")
plt.grid(axis="y", linestyle="--", alpha=0.3, color="white")
plt.xlim(right=2023)  # Limit x-axis to end at 2023
plt.show()

"""Demographic disparities"""

race_counts = df["race"].value_counts()
print(race_counts)
# how shootings are distributed by race

# to percentage
race_percentages = (df['race'].value_counts(normalize=True)* 100).round(2) # 2 decimal places
print(race_percentages)

# gender counts
gender_counts = df['gender'].value_counts()
print(gender_counts)

# state counts
state_counts = df['state'].value_counts()
top_state_counts = df['state'].value_counts().head(10) # shows top 10
print(state_counts)

# vizs across races
plt.style.use("dark_background")
plt.figure(figsize=(8, 4))
race_counts.plot(
    kind="bar",
    color="none",  # transparent bars
    edgecolor="white",  # white outlines
    linewidth=2  # thickness of bars
)
plt.xlabel("Race", color="white")  # text color
plt.ylabel("Number of Shootings", color="white")
plt.title("Police Shootings by Race", color="white")
plt.xticks(rotation=0, color="white")
plt.yticks(color="white")
plt.grid(False)
plt.show()

# Added head count to the graphs

import matplotlib.pyplot as plt
plt.style.use("dark_background")
plt.figure(figsize=(8, 4))

# Plot your bar chart and save the Axes object to 'ax'
ax = race_counts.plot(
    kind="bar",
    color="none",      # transparent bars
    edgecolor="white", # white outlines
    linewidth=2        # thickness of bars
)

plt.xlabel("Race", color="white")
plt.ylabel("Number of Shootings", color="white")
plt.title("Police Shootings by Race", color="white")
plt.xticks(rotation=0, color="white")
plt.yticks(color="white")
plt.grid(False)

# Define a threshold below which you want to annotate the bar with its value
threshold = 10  # adjust this value as needed

# Iterate over each bar (patch) and add a text label if the height is below the threshold
for p in ax.patches:
    height = p.get_height()
    if height < threshold:
        # Annotate above the bar. Adjust the vertical offset as needed.
        ax.annotate(
            f"{height:.0f}",
            (p.get_x() + p.get_width() / 2, height),
            ha="center",
            va="bottom",
            color="white",
            fontsize=10
        )

plt.show()

# race distribution percentages

import matplotlib.pyplot as plt

plt.style.use("dark_background")
plt.figure(figsize=(8, 4))

# Plot the bar chart and capture the Axes object
ax = race_counts.plot(
    kind="bar",
    color="none",      # transparent bars
    edgecolor="white", # white outlines
    linewidth=2        # thickness of bars
)

plt.xlabel("Race", color="white")
plt.ylabel("Number of Shootings", color="white")
plt.title("Police Shootings by Race", color="white")
plt.xticks(rotation=0, color="white")
plt.yticks(color="white")
plt.grid(False)

# Annotate each bar with its exact value
for p in ax.patches:
    height = p.get_height()
    # Adjust the vertical position (here we add 0.5) so the number sits just above the bar
    ax.annotate(
        f"{height:.0f}",
        (p.get_x() + p.get_width() / 2, height + 0.5),
        ha="center",
        va="bottom",
        color="white",
        fontsize=10
    )

plt.show()

# gender distribution
plt.figure(figsize=(8, 4))
gender_counts.plot(kind="bar", color="none", edgecolor="white", linewidth=2)
plt.xlabel("Gender", color="white")
plt.ylabel("Number of Fatal Shootings", color="white")
plt.title("Fatal Police Shootings by Gender", color="white")
plt.xticks(rotation=0, color="white")
plt.yticks(color="white")
plt.grid(axis="y", linestyle="--", alpha=0.4, color="white")
plt.show()

# disparity across states
plt.figure(figsize=(8, 4))
top_state_counts.plot(kind="bar", color="none", edgecolor="white", linewidth=2)
plt.xlabel("State", color="white")
plt.ylabel("Number of Fatal Shootings", color="white")
plt.title("Top 10 States with Highest Fatal Police Shootings", color="white")
plt.xticks(rotation=45, color="white")
plt.yticks(color="white")
plt.grid(False)
plt.show()

# @title cleaning df_agencies
# replace missing values in type with unknown
df_agencies["type"].fillna("Unknown", inplace=True)

# replace missing values in oricodes with unknown
df_agencies["oricodes"].fillna("Unknown", inplace=True)

# make sure no more missing values
print(df_agencies.isnull().sum())

# merge data
joined_df = df.merge(df_agencies, on= 'id', how = 'inner')
joined_df.to_csv("joined_data.csv", index=False)

from google.colab import files
files.download("joined_data.csv")

df['year'] = df['date'].dt.year

# filter out any invalid or incomplete years (e.g., partial data for 2024)
valid_years = df['year'].value_counts().sort_index()
valid_years = valid_years[valid_years > 50]  # Assuming less than 50 means incomplete data

shootings_per_year = df[df['year'].isin(valid_years.index)].groupby('year').size()

plt.figure(figsize=(12, 6))
plt.style.use("dark_background")
plt.plot(shootings_per_year.index, shootings_per_year.values, marker='o', linestyle='-', color='white')
plt.xlabel("Year", fontsize=14, color="white")
plt.ylabel("Total Shootings", fontsize=14, color="white")
plt.title("Trend of Fatal Police Shootings Over Time", fontsize=16, color="white")
plt.xticks(fontsize=12, color="white")
plt.yticks(fontsize=12, color="white")
plt.grid(True, linestyle="--", alpha=0.5, color="gray")

plt.show()

df.columns

df.columns.tolist()

# How were individuals armed graph diuring hthe incident if any. Graph showing the distributions

armed_counts = df['armed_with'].value_counts()
armed_counts.plot(kind='bar', figsize=(9,5))
plt.title("How were individuals armed?")
plt.xlabel("Armed With")
plt.ylabel("Count of Fatal Shootings")
plt.show()

# Number of shootings with vs without body cam, by year
bodycam_by_year = df.groupby(['year', 'body_camera']).size().unstack(fill_value=0)

bodycam_by_year.plot(kind='bar', stacked=True, figsize=(10,5))
plt.title("Body Camera Usage in Fatal Shootings by Year")
plt.xlabel("Year")
plt.ylabel("Count of Shootings")
plt.legend(["No Body Cam", "Body Cam"], title="Body Camera")
plt.show()

# Fleeing or Not Fleeing
# How many fatal encounters involved suspects who were fleeing vs. not fleeing?
flee_counts = df['flee_status'].value_counts(dropna=False)
flee_counts.plot(kind='bar', figsize=(8,4))
plt.title("Were suspects fleeing?")
plt.xlabel("Flee Status")
plt.ylabel("Count")
plt.show()

# Group by race and flee_status
df.groupby(['race', 'flee_status']).size().unstack().plot(kind='bar', stacked=True)
plt.title("Flee Status by Race")
plt.xlabel("Race")
plt.ylabel("Count of Shootings")
plt.show()

# Count how many times was_mental_illness_related is True vs False
mental_illness_counts = df['was_mental_illness_related'].value_counts()

mental_illness_counts.plot(kind='bar')
plt.title("Was Mental Illness a Factor?")
plt.xlabel("Mental Illness Related")
plt.ylabel("Count")
plt.show()

# Over time
mi_by_year = df.groupby(['year','was_mental_illness_related']).size().unstack()
mi_by_year.plot(kind='line')
plt.title("Mental-Illness-Related Shootings Over Time")
plt.xlabel("Year")
plt.ylabel("Count")
plt.show()

# Goal: See which types of agencies are involved in the most fatal shootings

# First Count how many entries by agency type
type_counts = joined_df['type'].value_counts()

print("Number of fatal shootings by agency type:")
print(type_counts)

# We Use Bar chart
plt.figure(figsize=(8,4))
type_counts.plot(kind='bar', color='navy', edgecolor='black')
plt.title("Fatal Police Shootings by Agency Type")
plt.xlabel("Agency Type")
plt.ylabel("Count")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

print("df shape:", df.shape)
print("df_agencies shape:", df_agencies.shape)

joined_df = df.merge(df_agencies, on='id', how='inner')
print("joined_df shape:", joined_df.shape)

print("joined_df columns:")
print(joined_df.columns.tolist())

# Preview first rows
joined_df.head(5)

# Group by agency type (from the merged column "type")
grouped = joined_df.groupby("type").agg({
    'id': 'count',              # Count the number of fatal shooting events
    'total_shootings': 'sum'    # Sum the agency-reported total shootings
}).rename(columns={'id': 'fatal_shootings_in_dataset'})

print("Grouped Summary by Agency Type:")
print(grouped)

# Set up the figure and bar widths
fig, ax = plt.subplots(figsize=(10,6))
width = 0.35  # width of each bar group
indices = np.arange(len(grouped.index))

# Plot fatal shootings count
bar1 = ax.bar(indices - width/2, grouped['fatal_shootings_in_dataset'], width, label='Fatal Shootings (Dataset)', color='navy')

# Plot agency total shootings (from df_agencies)
bar2 = ax.bar(indices + width/2, grouped['total_shootings'], width, label='Total Shootings (Agencies)', color='darkorange')

# Add labels and title
ax.set_xticks(indices)
ax.set_xticklabels(grouped.index, rotation=45, ha='right')
ax.set_xlabel("Agency Type")
ax.set_ylabel("Number of Shootings")
ax.set_title("Fatal Shootings (Dataset) vs. Agency-Reported Total Shootings by Agency Type")
ax.legend()

plt.tight_layout()
plt.show()

#Agency Type vs. Yearly Trend
# Group by (year, type)
year_type_counts = joined_df.groupby(['year','type']).size().unstack(fill_value=0)

# Stacked bar chart
year_type_counts.plot(kind='bar', stacked=True, figsize=(10,5))
plt.title("Fatal Police Shootings by Agency Type Over the Years")
plt.xlabel("Year")
plt.ylabel("Count")
plt.legend(title="Agency Type")
plt.tight_layout()
plt.show()

# Or line chart for each type:
year_type_counts.plot(kind='line', figsize=(10,5))
plt.title("Fatal Police Shootings by Agency Type Over the Years")
plt.xlabel("Year")
plt.ylabel("Count")
plt.legend(title="Agency Type")
plt.show()



#Agency Type vs. Race Breakdown

# Goal: See if certain agency types have different
#racial distributions in their fatal shootings.
# For instance, does a sheriff’s office see a different
# distribution compared to local police?

# Group by (type, race)
type_race_counts = joined_df.groupby(['type','race']).size().unstack(fill_value=0)

# Stacked bar of race counts for each type
plt.figure(figsize=(9,5))
type_race_counts.plot(kind='bar', stacked=True, figsize=(10,6))
plt.title("Race of Individuals Fatally Shot by Agency Type")
plt.xlabel("Agency Type")
plt.ylabel("Count of Shootings")
plt.legend(title="Race", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Agency Type vs. Armed/Unarmed
#  Goal: Investigate whether certain
#  agency types have more unarmed shootings
#  compared to others.

def simple_armed_status(val):
    val = val.lower()
    if "unarmed" in val:
        return "unarmed"
    elif "unknown" in val:
        return "unknown"
    else:
        return "armed"

joined_df['armed_status_simple'] = joined_df['armed_with'].apply(simple_armed_status)

type_armed_counts = joined_df.groupby(['type','armed_status_simple']).size().unstack(fill_value=0)

type_armed_counts.plot(kind='bar', stacked=True, figsize=(10,6))
plt.title("Armed vs. Unarmed by Agency Type")
plt.xlabel("Agency Type")
plt.ylabel("Count of Shootings")
plt.legend(title="Armed Status")
plt.tight_layout()
plt.show()

# Load the city-level demographics data
demographics_df = pd.read_csv("/content/drive/MyDrive/Project 1- Team 2/Data&Github/us-cities-demographics.csv")
# Inspect the data
print(demographics_df.head())
print(demographics_df.columns.tolist())
