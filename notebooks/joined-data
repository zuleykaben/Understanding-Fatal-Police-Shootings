# -*- coding: utf-8 -*-
"""Joined Data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mzb51rOTA--HB1kdQ6AjKPvUTd_GiCkJ
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import seaborn as sns
import plotly.express as px

df = pd.read_csv('/content/drive/MyDrive/Project 1- Team 2/Data&Github/joined_data.csv')

df["flee_status"].fillna("Unknown", inplace=True)
df["threat_type"].fillna("Unknown", inplace=True)
df["name_x"].fillna("Unknown", inplace=True)

# Drop rows where latitude or longitude is missing
df.dropna(subset=["latitude", "longitude"], inplace=True)

# Drop redundant columns
df.drop(columns=["state_y", "name_y", "oricodes"], inplace=True)

# Define mapping for weapon categories
weapon_mapping = {
    "gun": "Firearm",
    "rifle": "Firearm",
    "shotgun": "Firearm",
    "pistol": "Firearm",
    "handgun": "Firearm",
    "revolver": "Firearm",
    "hatchet": "Knife or Blade",
    "machete": "Knife or Blade",
    "knife": "Knife or Blade",
    "sword": "Knife or Blade",
    "box cutter": "Knife or Blade",
    "vehicle": "Other Weapon",
    "blunt object": "Other Weapon",
    "unarmed": "Unarmed"
}

# Apply mapping (defaulting to 'Other Weapon' if not found)
df["armed_with"] = df["armed_with"].apply(lambda x: weapon_mapping.get(x.lower(), "Other Weapon"))

# Convert age to integer
df["age"] = df["age"].astype(int)

# Save cleaned dataset
df.to_csv("cleaned_data.csv", index=False)

from google.colab import files
files.download("cleaned_data.csv")

# @title Visualizations

# updated categories for the Sankey diagram
categories = ["Fleeing", "Not Fleeing", "Unarmed", "Firearm", "Knife or Blade", "Other Weapon",
              "Body Cam Used", "No Body Cam", "Fatal"]

# count occurrences for the flow with Unarmed explicitly included
fleeing_armed = df.groupby(["flee_status", "armed_with"]).size().unstack().fillna(0)
armed_bodycam = df.groupby(["armed_with", "body_camera"]).size().unstack().fillna(0)
bodycam_outcome = df.groupby(["body_camera"]).size()

sources = []
targets = []
values = []

# Fleeing Status -> Armed Status (Now with Unarmed explicitly shown)
for flee_status in fleeing_armed.index:
    for armed_status in fleeing_armed.columns:
        sources.append(categories.index("Fleeing" if flee_status != "not" else "Not Fleeing"))
        targets.append(categories.index(armed_status))  # Using actual weapon category
        values.append(fleeing_armed.loc[flee_status, armed_status])

# Armed Status -> Body Camera
for armed_status in armed_bodycam.index:
    for body_cam in armed_bodycam.columns:
        sources.append(categories.index(armed_status))  # Keeping weapon category labels
        targets.append(categories.index("Body Cam Used" if body_cam else "No Body Cam"))
        values.append(armed_bodycam.loc[armed_status, body_cam])

# Body Camera -> Fatal Outcome
for body_cam in bodycam_outcome.index:
    sources.append(categories.index("Body Cam Used" if body_cam else "No Body Cam"))
    targets.append(categories.index("Fatal"))
    values.append(bodycam_outcome[body_cam])

custom_colors = [
    "#FFD700", "#FFD700",  # Yellow for Fleeing/Not Fleeing
    "#FF0000", "#8B0000", "#DC143C", "#A52A2A",  # Reds for Armed Categories
    "#4682B4", "#708090",  # Blue/Grey for Body Cam Status
    "#FFFFFF"  # White for Fatal outcome
]

fig = go.Figure(go.Sankey(
    node=dict(
        pad=15,
        thickness=20,
        line=dict(color="black", width=0.5),
        label=categories,
        color=custom_colors  # Apply the custom colors
    ),
    link=dict(
        source=sources,
        target=targets,
        value=values
    )
))

fig.update_layout(
    title_text="Flow of Fatal Police Encounters: Fleeing, Armed Status & Body Camera Usage",
    font_size=12,
    paper_bgcolor="black",
    font_color="white"
)

fig.show()

# @title Visualizations

# Count occurrences of each weapon type under different threat categories
weapon_threat_counts = df.groupby(["threat_type", "armed_with"]).size().unstack().fillna(0)

# Set up the figure
plt.figure(figsize=(12, 6))
weapon_threat_counts.plot(kind="bar", stacked=True, colormap="coolwarm", figsize=(12, 6))

# Customize appearance
plt.title("Weapon Types Across Different Threat Levels", fontsize=14, color="white")
plt.xlabel("Threat Type", fontsize=12, color="white")
plt.ylabel("Count", fontsize=12, color="white")
plt.xticks(rotation=45, color="white")
plt.yticks(color="white")
plt.legend(title="Weapon Type", fontsize=10, title_fontsize=12)

# Apply dark background to match presentation theme
plt.style.use("dark_background")

# Show the plot
plt.show()

# @title Visualizations

# Create a box plot for age distribution by race
plt.figure(figsize=(12, 6))

sns.boxplot(
    data=df,
    x="race",
    y="age",
    hue="gender",
    palette="coolwarm"
)

# Customize the appearance
plt.title("Age Distribution of Fatal Police Encounters by Race & Gender", fontsize=14, color="white")
plt.xlabel("Race", fontsize=12, color="white")
plt.ylabel("Age", fontsize=12, color="white")
plt.xticks(color="white")
plt.yticks(color="white")
plt.legend(title="Gender", fontsize=10, title_fontsize=12)

# Apply dark background to match presentation theme
plt.style.use("dark_background")

# Show the plot
plt.show()

# Calculate the median age for each race and gender group
median_ages = df.groupby(["race", "gender"])["age"].median().unstack()

# Display the results
print(median_ages)

# @title Visualizations

# Define state population data (2020 Census estimates)
state_population = {
    "AL": 5039877, "AK": 732673, "AZ": 7151502, "AR": 3025891, "CA": 39538223,
    "CO": 5773714, "CT": 3605944, "DE": 989948, "FL": 21538187, "GA": 10711908,
    "HI": 1455271, "ID": 1839106, "IL": 12812508, "IN": 6785528, "IA": 3190369,
    "KS": 2937880, "KY": 4505836, "LA": 4657757, "ME": 1362359, "MD": 6177224,
    "MA": 7029917, "MI": 10077331, "MN": 5706494, "MS": 2961279, "MO": 6154913,
    "MT": 1084225, "NE": 1961504, "NV": 3104614, "NH": 1377529, "NJ": 9288994,
    "NM": 2117522, "NY": 20201249, "NC": 10439388, "ND": 779094, "OH": 11799448,
    "OK": 3959353, "OR": 4237256, "PA": 13002700, "RI": 1097379, "SC": 5118425,
    "SD": 886667, "TN": 6910840, "TX": 29145505, "UT": 3271616, "VT": 643077,
    "VA": 8631393, "WA": 7705281, "WV": 1793716, "WI": 5893718, "WY": 576851
}

# Convert to DataFrame
pop_df = pd.DataFrame(list(state_population.items()), columns=["state", "population"])

# Aggregate fatal encounters per state
state_counts = df["state_x"].value_counts().reset_index()
state_counts.columns = ["state", "fatal_encounters"]

# Merge with population data
state_counts = state_counts.merge(pop_df, on="state", how="left")

# Calculate encounters per million residents
state_counts["fatal_per_million"] = (state_counts["fatal_encounters"] / state_counts["population"]) * 1e6

# Create the Choropleth Map (Adjusted for Population)
fig = px.choropleth(
    state_counts,
    locations="state",
    locationmode="USA-states",
    color="fatal_per_million",
    color_continuous_scale="Reds",
    title="Fatal Police Encounters Per Million Residents by State",
    scope="usa",
    labels={"fatal_per_million": "Fatal Encounters per Million"},
)

# Show the map
fig.show()

# @title Visualizations

# Create a scatter plot showing age vs. armed status, colored by mental health crisis status
plt.figure(figsize=(12, 6))
sns.scatterplot(
    data=df,
    x="age",
    y="armed_with",
    hue="was_mental_illness_related",
    palette={True: "red", False: "blue"},
    alpha=0.6
)

# Customize the appearance
plt.xlabel("Age", fontsize=12, color="white")
plt.ylabel("Armed Status", fontsize=12, color="white")
plt.xticks(color="white")
plt.yticks(color="white")
plt.legend(title="Mental Health Crisis", labels=["No", "Yes"], fontsize=10, title_fontsize=12)

# Show the plot
plt.show()

# Define the threshold for "younger" victims (e.g., under 25)
young_victims = df[df["age"] < 25]

# Calculate the percentage of younger victims who were unarmed
young_unarmed_pct = (len(young_victims[young_victims["armed_with"] == "Unarmed"]) / len(young_victims)) * 100

# Calculate the percentage of younger victims who were experiencing a mental health crisis
young_mental_crisis_pct = (len(young_victims[young_victims["was_mental_illness_related"] == True]) / len(young_victims)) * 100

print(f"Percentage of younger victims (<25) who were unarmed: {young_unarmed_pct:.2f}%")
print(f"Percentage of younger victims (<25) experiencing a mental health crisis: {young_mental_crisis_pct:.2f}%")

# @title Visualization
# Aggregate fatal encounters by race
race_counts = df["race"].value_counts().reset_index()
race_counts.columns = ["race", "fatal_encounters"]

# Define population estimates for racial groups (based on US Census)
race_population = {
    "W": 197000000,  # White
    "B": 46000000,   # Black or African American
    "H": 62000000,   # Hispanic or Latino
    "A": 19000000,   # Asian
    "N":  6000000,   # Native American / Indigenous
    "O":  8000000    # Other / Mixed Race
}

# Convert to DataFrame
pop_df = pd.DataFrame(list(race_population.items()), columns=["race", "population"])

# Merge with fatal encounter counts
race_counts = race_counts.merge(pop_df, on="race", how="left")

# Calculate fatal encounters per million people
race_counts["fatal_per_million"] = (race_counts["fatal_encounters"] / race_counts["population"]) * 1e6

# Create a bar chart showing per capita fatal encounters by race
plt.figure(figsize=(10, 6))
plt.bar(race_counts["race"], race_counts["fatal_per_million"], color=["white", "red", "orange", "yellow", "green", "blue"])

# Customize appearance
plt.title("Fatal Police Encounters Per Million People by Race", fontsize=14, color="white")
plt.xlabel("Race", fontsize=12, color="white")
plt.ylabel("Fatal Encounters per Million", fontsize=12, color="white")
plt.xticks(color="white")
plt.yticks(color="white")

# Apply dark background for presentation theme
plt.style.use("dark_background")

# Show the plot
plt.show()
